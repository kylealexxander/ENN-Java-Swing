/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package neuralnetwork;

import com.sun.glass.events.KeyEvent;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Composite;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GraphicsConfiguration;
import java.awt.Image;
import java.awt.Paint;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.Stroke;
import java.awt.font.FontRenderContext;
import java.awt.font.GlyphVector;
import java.awt.geom.AffineTransform;
import java.awt.geom.Line2D;
import java.awt.image.BufferedImage;
import java.awt.image.BufferedImageOp;
import java.awt.image.ImageObserver;
import java.awt.image.RenderedImage;
import java.awt.image.renderable.RenderableImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.AttributedCharacterIterator;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Administrator
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    
    int input_neurons = 0;
    int output_neurons = 0;
    
    boolean new_project = false;
    
//    input panel
    int textfield_width = 40;
    int textfield_height = 40;
    int textfield_bias = 20;
    
//    size of each layer
    int layer_width = 0;
    int layer_height = 0;
    
//    output panel
    int label_width = 40;
    int label_height = 35;
    int label_bias = 20;
    
//    all perceptron
    int perceptron_width = 50;
    int perceptron_height = 50;
    int perceptron_bias = 15;
    
    int max_neurons = 15;
    
    boolean is_new = false;
    
    float[] input_data;
    
    JTextField[] ifields = new JTextField[max_neurons];
    JLabel[] ofields = new JLabel[max_neurons];
    JLabel[] iperceptrons = new JLabel[max_neurons];
    JLabel[] operceptrons = new JLabel[max_neurons];
    JLabel[] ilabels = new JLabel[max_neurons];
    JLabel[] olabels = new JLabel[max_neurons];
    
    float[][] wmin;
    float[][] wmax;
    
    int i, j;
    
    TrainPanel trainPanel = new TrainPanel();
    JPanel graphPanel;
    
    float[] errors;
    boolean is_opened = false;
    
    public MainFrame() {
        initComponents();
        MainPanel.setVisible(false);
        jFileChooser1.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        MainPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        cntLabel = new javax.swing.JLabel();
        iPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        iLayer = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        oLayer = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        oPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        cntOutLabel = new javax.swing.JLabel();
        jFileChooser1 = new javax.swing.JFileChooser();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();

        jMenu3.setText("jMenu3");

        jMenu4.setText("jMenu4");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ENN Toolkit");
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setLocation(new java.awt.Point(0, 0));
        setResizable(false);
        setSize(new java.awt.Dimension(0, 0));

        MainPanel.setPreferredSize(new java.awt.Dimension(980, 580));
        MainPanel.setLayout(null);

        jLabel2.setText("(Number of Inputs: ");
        MainPanel.add(jLabel2);
        jLabel2.setBounds(460, 20, 110, 14);

        cntLabel.setText("000");
        MainPanel.add(cntLabel);
        cntLabel.setBounds(560, 20, 18, 14);

        iPanel.setBackground(new java.awt.Color(204, 204, 255));
        iPanel.setOpaque(false);
        iPanel.setPreferredSize(new java.awt.Dimension(480, 80));

        javax.swing.GroupLayout iPanelLayout = new javax.swing.GroupLayout(iPanel);
        iPanel.setLayout(iPanelLayout);
        iPanelLayout.setHorizontalGroup(
            iPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 480, Short.MAX_VALUE)
        );
        iPanelLayout.setVerticalGroup(
            iPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 80, Short.MAX_VALUE)
        );

        MainPanel.add(iPanel);
        iPanel.setBounds(270, 50, 480, 80);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Layer1");
        MainPanel.add(jLabel4);
        jLabel4.setBounds(20, 140, 47, 17);

        iLayer.setBackground(new java.awt.Color(255, 204, 204));
        iLayer.setOpaque(false);
        iLayer.setPreferredSize(new java.awt.Dimension(480, 90));

        javax.swing.GroupLayout iLayerLayout = new javax.swing.GroupLayout(iLayer);
        iLayer.setLayout(iLayerLayout);
        iLayerLayout.setHorizontalGroup(
            iLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        iLayerLayout.setVerticalGroup(
            iLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        MainPanel.add(iLayer);
        iLayer.setBounds(280, 130, 480, 90);

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setText("Layer2");
        MainPanel.add(jLabel5);
        jLabel5.setBounds(20, 350, 47, 17);

        oLayer.setBackground(new java.awt.Color(204, 255, 204));
        oLayer.setOpaque(false);
        oLayer.setPreferredSize(new java.awt.Dimension(480, 90));

        javax.swing.GroupLayout oLayerLayout = new javax.swing.GroupLayout(oLayer);
        oLayer.setLayout(oLayerLayout);
        oLayerLayout.setHorizontalGroup(
            oLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 480, Short.MAX_VALUE)
        );
        oLayerLayout.setVerticalGroup(
            oLayerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 90, Short.MAX_VALUE)
        );

        MainPanel.add(oLayer);
        oLayer.setBounds(280, 240, 480, 90);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("Outputs");
        MainPanel.add(jLabel3);
        jLabel3.setBounds(390, 540, 57, 17);

        oPanel.setBackground(new java.awt.Color(153, 255, 204));
        oPanel.setOpaque(false);
        oPanel.setPreferredSize(new java.awt.Dimension(480, 100));

        javax.swing.GroupLayout oPanelLayout = new javax.swing.GroupLayout(oPanel);
        oPanel.setLayout(oPanelLayout);
        oPanelLayout.setHorizontalGroup(
            oPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        oPanelLayout.setVerticalGroup(
            oPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        MainPanel.add(oPanel);
        oPanel.setBounds(280, 360, 480, 100);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("DataSet");
        jLabel1.setAlignmentX(0.5F);
        jLabel1.setName(""); // NOI18N
        MainPanel.add(jLabel1);
        jLabel1.setBounds(390, 20, 55, 17);

        jLabel7.setText("(Number of Outputs:");
        MainPanel.add(jLabel7);
        jLabel7.setBounds(460, 540, 140, 14);

        cntOutLabel.setText("000");
        MainPanel.add(cntOutLabel);
        cntOutLabel.setBounds(570, 540, 18, 14);
        MainPanel.add(jFileChooser1);
        jFileChooser1.setBounds(210, 160, 240, 200);

        jMenu1.setText("File");

        jMenuItem1.setText("New Project");
        jMenuItem1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jMenuItem1MouseReleased(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem7.setText("Open");
        jMenuItem7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jMenuItem7MouseReleased(evt);
            }
        });
        jMenu1.add(jMenuItem7);

        jMenuItem8.setText("Save As");
        jMenuItem8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jMenuItem8MouseReleased(evt);
            }
        });
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem8);

        jMenuItem2.setText("Close");
        jMenuItem2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jMenuItem2MouseReleased(evt);
            }
        });
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Run");

        jMenuItem3.setText("Train");
        jMenuItem3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jMenuItem3MouseReleased(evt);
            }
        });
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setText("Test");
        jMenuItem4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jMenuItem4MouseReleased(evt);
            }
        });
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuItem6.setText("Graph");
        jMenuItem6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jMenuItem6MouseReleased(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem5.setText("Run");
        jMenuItem5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jMenuItem5MouseReleased(evt);
            }
        });
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void CreateUI (String ineurons, String oneurons) {
        
        jFileChooser1.setVisible(false);
        
        layer_width = MainPanel.getPreferredSize().width;
        layer_height = MainPanel.getPreferredSize().height / 4;

        iPanel.removeAll();
        oPanel.removeAll();
        iLayer.removeAll();
        oLayer.removeAll();
        cntLabel.setText("");
        cntOutLabel.setText("");


        input_neurons = Integer.parseInt(ineurons);
        output_neurons = Integer.parseInt(oneurons);

        int blkwidth = 0;
        int blkheight = 0;

//            build input panel
        cntLabel.setText(ineurons + ")");
        cntOutLabel.setText(oneurons + ")");

        for (i = 0; i < input_neurons; i++) {
            ifields[i] = new JTextField(1);
            ifields[i].setBounds(i * (this.textfield_width + this.textfield_bias) + this.textfield_bias / 2, this.textfield_bias / 2, this.textfield_width, this.textfield_height);
            iPanel.add(ifields[i]);
        }

        blkwidth = input_neurons * this.textfield_width + this.textfield_bias + (input_neurons - 1) * this.textfield_bias;
        blkheight = this.textfield_height + this.textfield_bias;
        iPanel.setSize(blkwidth, blkheight);
        iPanel.setLocation(layer_width / 2 - blkwidth / 2, layer_height / 2 - blkheight / 2);
        iPanel.setBorder(BorderFactory.createLineBorder(Color.black));

//            build output panel            
        for (i = 0; i < output_neurons; i++) {
            ofields[i] = new JLabel();
            ofields[i].setBounds(i * (this.label_width + this.label_bias) + this.label_bias / 2, this.label_bias / 2, this.label_width, this.label_height);
            ofields[i].setBorder(BorderFactory.createLineBorder(Color.black));
            oPanel.add(ofields[i]);
        }


        blkwidth = output_neurons * this.label_width + this.label_bias + (output_neurons - 1) * this.label_bias;
        blkheight = this.label_height + this.label_bias;
        oPanel.setSize(blkwidth, blkheight);
        oPanel.setLocation(layer_width / 2 - blkwidth / 2, layer_height * 3 + layer_height / 2 - blkheight / 2);
        oPanel.setBorder(BorderFactory.createLineBorder(Color.black));


//            build input layer panel            
        for (i = 0; i < input_neurons; i++) {
            iperceptrons[i] = new JLabel("") {
                @Override
                public void paint(Graphics g) {
                    super.paintComponent(g);

                    Graphics2D g2 = (Graphics2D) g;
                    g2.setStroke(new BasicStroke(2));
                    g2.setColor(Color.YELLOW);
                    g2.fillOval(0, 0, perceptron_width - 1, perceptron_height - 1);

                    g2.setColor(Color.BLACK);
                    g2.drawOval(0, 0, perceptron_width - 3, perceptron_height - 3);
                }
            };

            iperceptrons[i].setBounds(i * (this.perceptron_width + this.perceptron_bias) + this.perceptron_bias, this.perceptron_bias, this.perceptron_width, this.perceptron_height);
            

            ilabels[i] = new JLabel("00.00");
            ilabels[i].setBounds(iperceptrons[i].getBounds().x + 8, iperceptrons[i].getBounds().y + 12, 40, 20);
            iLayer.add(ilabels[i]);
            
            iLayer.add(iperceptrons[i]);
        }

        blkwidth = input_neurons * this.perceptron_width + this.perceptron_bias * 2 + (input_neurons - 1) * this.perceptron_bias;
        blkheight = this.perceptron_height + this.perceptron_bias * 2;
        iLayer.setSize(blkwidth, blkheight);
        iLayer.setLocation(layer_width / 2 - blkwidth / 2, layer_height * 1 + layer_height / 2 - blkheight / 2 - 35);
        iLayer.setBorder(BorderFactory.createLineBorder(Color.black));
        jLabel4.setLocation(iLayer.getX(), iLayer.getY() - jLabel4.getPreferredSize().height - 3);


//            build output layer panel
        for (i = 0; i < output_neurons; i++) {
            operceptrons[i] = new JLabel("") {
                @Override
                public void paint(Graphics g) {
                    super.paintComponent(g);

                    Graphics2D g2 = (Graphics2D) g;
                    g2.setStroke(new BasicStroke(2));
                    g2.setColor(Color.GREEN);
                    g2.fillOval(0, 0, perceptron_width - 1, perceptron_height - 1);

                    g2.setColor(Color.BLACK);
                    g2.drawOval(0, 0, perceptron_width - 3, perceptron_height - 3);
                }
            };
            operceptrons[i].setBounds(i * (this.perceptron_width + this.perceptron_bias) + this.perceptron_bias, this.perceptron_bias, this.perceptron_width, this.perceptron_height);
            
            olabels[i] = new JLabel("00.00");
            olabels[i].setBounds(operceptrons[i].getBounds().x + 8, operceptrons[i].getBounds().y + 12, 40, 20);
            olabels[i].setText("00.00");
            oLayer.add(olabels[i]);
            
            oLayer.add(operceptrons[i]);
        }

        blkwidth = output_neurons * this.perceptron_width + this.perceptron_bias * 2 + (output_neurons - 1) * this.perceptron_bias;
        blkheight = this.perceptron_height + this.perceptron_bias * 2;
        oLayer.setSize(blkwidth, blkheight);
        oLayer.setLocation(layer_width / 2 - blkwidth / 2, layer_height * 2 + layer_height / 2 - blkheight / 2 + 35);
        oLayer.setBorder(BorderFactory.createLineBorder(Color.black));
        jLabel5.setLocation(oLayer.getX(), oLayer.getY() + oLayer.getSize().height + 3);

        JPanel linePanel = new JPanel() {
            @Override
            public void paintComponent(Graphics g) {
                super.paintComponent(g);
                Graphics2D g2 = (Graphics2D) g;

                for (i = 0; i < input_neurons; i++) {
                    for (j = 0; j < input_neurons; j++) {
                        g2.drawLine(iPanel.getX() + ifields[i].getBounds().x + ifields[i].getBounds().width / 2, iPanel.getY() + ifields[i].getBounds().y + ifields[i].getBounds().height, iLayer.getX() + iperceptrons[i].getBounds().x + iperceptrons[i].getBounds().width / 2, iLayer.getY() + iperceptrons[i].getBounds().y);
                    }
                }

                for (i = 0; i < input_neurons; i++) {
                    for (j = 0; j < output_neurons; j++) {
                        g2.setColor(Color.red);
                        g2.drawLine(iLayer.getX() + iperceptrons[i].getBounds().x + iperceptrons[i].getBounds().width / 2, iLayer.getY() + iperceptrons[i].getBounds().y + iperceptrons[i].getBounds().height, oLayer.getX() + operceptrons[j].getBounds().x + operceptrons[j].getBounds().width / 2, oLayer.getY() + operceptrons[j].getBounds().y);
                        g2.setColor(Color.black);
                        g2.drawLine(iLayer.getX() + iperceptrons[i].getBounds().x + iperceptrons[i].getBounds().width / 2 + 5, iLayer.getY() + iperceptrons[i].getBounds().y + iperceptrons[i].getBounds().height, oLayer.getX() + operceptrons[j].getBounds().x + operceptrons[j].getBounds().width / 2 + 5, oLayer.getY() + operceptrons[j].getBounds().y);
                    }
                }

                for (i = 0; i < output_neurons; i++) {
                    for (j = 0; j < output_neurons; j++) {
                        g2.drawLine(oLayer.getX() + operceptrons[i].getBounds().x + operceptrons[i].getBounds().width / 2, oLayer.getY() + operceptrons[i].getBounds().y + operceptrons[i].getBounds().height, oPanel.getX() + ofields[i].getBounds().x + ofields[i].getBounds().width / 2, oPanel.getY() + ofields[i].getBounds().y);
                    }
                }
            }
        };
        linePanel.setBackground(Color.CYAN);
        linePanel.setBounds(0, 0, MainPanel.getPreferredSize().width, MainPanel.getPreferredSize().height);
        MainPanel.add(linePanel, new Integer(-1));

        MainPanel.setVisible(true);
    }
    
    private void jMenuItem3MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem3MouseReleased
        // TODO add your handling code here:
        if (input_neurons == 0 || output_neurons == 0) {
            JOptionPane.showMessageDialog(null, "No Project", "Project Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        trainPanel.setNeurons(input_neurons, output_neurons, is_new);
        is_new = false;
        
        MainPanel.setVisible(false);
        try {
            graphPanel.setVisible(false);
        } catch (NullPointerException e) {
            
        }
        trainPanel.setVisible(true);
        trainPanel.setBounds(0, 0, MainPanel.getPreferredSize().width, MainPanel.getPreferredSize().height);
        this.add(trainPanel);
    }//GEN-LAST:event_jMenuItem3MouseReleased

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem4MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem4MouseReleased
        // TODO add your handling code here:
        if (new_project == true) {
            trainPanel.setVisible(false);
            try {
                graphPanel.setVisible(false);
            } catch (NullPointerException e) {

            }
            CreateUI(String.valueOf(input_neurons), String.valueOf(output_neurons));
        } else {
            JOptionPane.showMessageDialog(null, "No Project", "Project Error", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jMenuItem4MouseReleased

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem5MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem5MouseReleased
        // TODO add your handling code here:
        input_data = new float[input_neurons];
        for (i = 0; i < input_neurons; i++) {
            if (ifields[i].getText().length() == 0) {
                JOptionPane.showMessageDialog(null, "Empty Input Value", "Empty Value Error", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
            try {
                input_data[i] = Float.parseFloat(ifields[i].getText());
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(null, "Invalid Input Value", "Input Value Error", JOptionPane.INFORMATION_MESSAGE);
                return;
            }
        }
        
        for (i = 0; i < input_neurons; i++) {
            ilabels[i].setText(String.valueOf(input_data[i]));
        }
        
        if (is_opened == false) {
            wmin = new float[input_neurons][output_neurons];
            wmax = new float[input_neurons][output_neurons];

            wmin = trainPanel.getWmin();
            wmax = trainPanel.getWmax();
        }
        
        float[] ED;
        
        ED = new float[output_neurons];        
        for(int k = 0; k < output_neurons; k++){
            ED[k] = 0;
            for(int j = 0; j < input_neurons; j++){
                float w_sum = (wmax[j][k] + wmin[j][k]) / 2;
                float w_sub = (wmax[j][k] - wmin[j][k]) / 2;
                float delta = (input_data[j] - w_sum) / w_sub;
                ED[k] = ED[k] + delta * delta;
            }
        }
        
        int rlt_P = 0;
        float rlt_ED = ED[0];
        
        for(int i = 1; i < output_neurons; i++){
            if(rlt_ED > ED[i]){
                rlt_P = i;
                rlt_ED = ED[i];
            }
        }
        
        System.out.println("RESULT --------------------------------------");
        for(int i = 0; i < output_neurons; i++){
            System.out.print(ED[i] + "\t");
        }
        System.out.println("THE CLUSTER is " + rlt_P);
                
        
        for (i = 0; i < output_neurons; i++) {
            ofields[i].setText(String.valueOf(ED[i]));
            olabels[i].setText(String.valueOf(ED[i]));
            
            if (i == rlt_P) {
                ofields[i].setOpaque(true);
                ofields[i].setBackground(Color.MAGENTA);
            }
        }
        
        JOptionPane.showMessageDialog(null, "Cluster is " + String.valueOf(rlt_P + 1), "Test Result", JOptionPane.INFORMATION_MESSAGE);
        
    }//GEN-LAST:event_jMenuItem5MouseReleased

    private void jMenuItem2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem2MouseReleased
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItem2MouseReleased

    private void jMenuItem1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem1MouseReleased
        // TODO add your handling code here:
        JTextField iNeuron = new JTextField();
        JTextField oNeuron = new JTextField();
        Object[] message = {
            "Input Neurons:", iNeuron,
            "Output Neurons:", oNeuron
        };

        int option = JOptionPane.showConfirmDialog(null, message, "Startup", JOptionPane.OK_CANCEL_OPTION);
        if (option == JOptionPane.OK_OPTION) {
            is_opened = false;
            CreateUI(iNeuron.getText(), oNeuron.getText());
            is_new = true;
        } else {
            System.out.println("Login canceled");
        }

        if (new_project == true) {
            trainPanel.setVisible(false);
        }

        new_project = true;
    }//GEN-LAST:event_jMenuItem1MouseReleased

    private void jMenuItem6MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem6MouseReleased
        // TODO add your handling code here:
//        asdasd;
        
        MainPanel.setVisible(false);
        trainPanel.setVisible(false);
        
        errors = trainPanel.getErrs();
        
        float maxValue = errors[0];
        for(int i=1;i < errors.length;i++){
          if(errors[i] > maxValue){
                maxValue = errors[i];
              }
        }
        
        float padding = 40;
        float graphtail = 40;
        float maxval = maxValue;
        
        float xratio = (MainPanel.getPreferredSize().width - padding * 2 - graphtail * 2) / errors.length;
        float yratio = (MainPanel.getPreferredSize().height - padding * 2 - graphtail * 2) / maxval;
        
        try {
            graphPanel = new JPanel() {
                @Override
                public void paintComponent(Graphics g) {
                    super.paintComponent(g);
                    
                    Graphics2D g2 = (Graphics2D) g;
                    
                    g2.drawString("0", Math.round(padding + graphtail) - 15, Math.round(padding + graphtail + maxval * yratio) + 20);
                    g2.drawString("Iteration", Math.round(padding + 2 * graphtail + errors.length * xratio) - 20, Math.round(padding + graphtail + maxval * yratio) + 20);
                    g2.drawString("Error", Math.round(padding + graphtail) - 25, Math.round(padding - 10));
                    
                    g2.drawLine(Math.round(padding + graphtail), Math.round(padding), Math.round(padding + graphtail), Math.round(padding + graphtail));
                    g2.drawLine(Math.round(padding + graphtail), Math.round(padding + graphtail), Math.round(padding + graphtail), Math.round(padding + graphtail + maxval * yratio));
                    g2.drawLine(Math.round(padding + graphtail), Math.round(padding + graphtail + maxval * yratio), Math.round(padding + graphtail), Math.round(padding + 2 * graphtail + maxval * yratio));
                    
                                       
                    g2.drawLine(Math.round(padding), Math.round(padding + graphtail + maxval * yratio), Math.round(padding + graphtail), Math.round(padding + graphtail + maxval * yratio));
                    g2.drawLine(Math.round(padding + graphtail), Math.round(padding + graphtail + maxval * yratio), Math.round(padding + graphtail + errors.length * xratio), Math.round(padding + graphtail + maxval * yratio));
                    g2.drawLine(Math.round(padding + graphtail + errors.length * xratio), Math.round(padding + graphtail + maxval * yratio), Math.round(padding + graphtail + errors.length * xratio + graphtail), Math.round(padding + graphtail + maxval * yratio));
                    
                    for (j = 1; j < errors.length; j++) {
                        g2.drawLine(Math.round(padding + graphtail + (j - 1) * xratio), Math.round(padding + graphtail + (maxval - errors[j-1]) * yratio), Math.round(padding + graphtail + j * xratio), Math.round(padding + graphtail + (maxval - errors[j]) * yratio));
                        if (j % 5 == 0) {
                            g2.drawString(String.valueOf(j), Math.round(padding + graphtail + j * xratio), Math.round(padding + graphtail + maxval * yratio) + 20);
                        }
                        
                        if (j == Math.round(errors.length / 2)) {
                            g2.drawString(String.valueOf(errors[j]), Math.round(padding + graphtail) - 25, Math.round(padding + graphtail + (maxval - errors[j]) * yratio));
                        }
                        
                        if (j == errors.length) {
                            g2.drawString(String.valueOf(errors[j]), Math.round(padding + graphtail) - 35, Math.round(padding + graphtail + (maxval - errors[j]) * yratio));
                        }
                    }
                }
            };
            graphPanel.setBackground(Color.LIGHT_GRAY);
            graphPanel.setBounds(0, 0, Math.round(padding * 2 + graphtail * 2 + errors.length * xratio), Math.round(2 * padding + 2 * graphtail + maxval * yratio));
            
            this.add(graphPanel);
        } catch (NullPointerException e) {
            
        }
        
        System.out.println("OK");
        
    }//GEN-LAST:event_jMenuItem6MouseReleased

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem8MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem8MouseReleased
        // TODO add your handling code here:
        
        // click save as menu
        
        System.out.println("\n\n\n\n\n");
        System.out.println("Testing save data...");
        
//        System.out.println("Input: " + this.input_neurons);
//        System.out.println("Output: " + this.output_neurons);
        
        float[][] pwmin = new float[input_neurons][output_neurons];
        float[][] pwmax = new float[input_neurons][output_neurons];
        
        pwmin = trainPanel.getWmin();
        pwmax = trainPanel.getWmax();
        
        try {
            System.out.println("MIN: " + pwmin.length);
            System.out.println("MAX: " + pwmax.length);
        } catch (Exception e) {
            System.out.println("Insufficient Data. Please try to check if training is finished.");
            JOptionPane.showMessageDialog(null, "Insufficient Data. Please try to check if training is finished.", "Save Error", JOptionPane.INFORMATION_MESSAGE);
            
            return;
        }
        
        jFileChooser1.setVisible(true);
        jFileChooser1.setCurrentDirectory(new java.io.File(System.getProperty("user.dir")));
        int result = jFileChooser1.showSaveDialog(this);
        
        if (result == JFileChooser.APPROVE_OPTION) {
        
            try {
                PrintWriter out = new PrintWriter(jFileChooser1.getSelectedFile() + ".enn");

                out.println(this.input_neurons + "=" + this.output_neurons);

                for (int i = 0; i < input_neurons; i++) {
                    for (int j = 0; j < output_neurons; j++) {
                        out.print(pwmin[i][j] + "=");
                    }
                }
                out.println();

                for (int m = 0; m < input_neurons; m++) {
                    for (int n = 0; n < output_neurons; n++) {
                        out.print(pwmax[m][n] + "=");
                    }
                }

                out.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jMenuItem8MouseReleased

    private void jMenuItem7MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuItem7MouseReleased
        // TODO add your handling code here:
        
        jFileChooser1.setVisible(true);
        
        jFileChooser1.setCurrentDirectory(new java.io.File(System.getProperty("user.dir")));
        jFileChooser1.addChoosableFileFilter(new FileNameExtensionFilter("Model File", "enn"));
        int result = jFileChooser1.showOpenDialog(this);
        
        if (result == JFileChooser.APPROVE_OPTION) {
            
            File selectedFile = jFileChooser1.getSelectedFile();
        
            int iterators = 0;

            // Open model
            try(BufferedReader br = new BufferedReader(new FileReader(selectedFile))) {
                for(String line; (line = br.readLine()) != null; ) {
                    // process the line.
                    System.out.println(line);

                    switch (iterators) {
                        case 0:
                            this.input_neurons = Integer.valueOf(line.split("=")[0]);
                            this.output_neurons = Integer.valueOf(line.split("=")[1]);

                            System.out.println(this.input_neurons + "=" + this.output_neurons);
                            break;
                        case 1:
                            wmin = new float[input_neurons][output_neurons];

                            String [] temp = line.split("=");

                            System.out.println(temp.length);

                            for (int i = 0; i < input_neurons; i++) {
                                for (int j = 0; j < output_neurons; j++) {
                                    wmin[i][j] = Float.valueOf(temp[i * output_neurons + j]);
                                }
                            }                        
                            break;
                        case 2:
                            wmax = new float[input_neurons][output_neurons];

                            String [] temp1 = line.split("=");

                            for (int i = 0; i < input_neurons; i++) {
                                for (int j = 0; j < output_neurons; j++) {
                                    wmax[i][j] = Float.valueOf(temp1[i * output_neurons + j]);
                                }
                            }                        
                            break;
                    }

                    iterators += 1;
                }

                CreateUI(String.valueOf(input_neurons), String.valueOf(output_neurons));
                is_new = true;

                if (new_project == true) {
                    trainPanel.setVisible(false);
                }

                new_project = true;
                // line is not visible here.

                is_opened = true;
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception e) {
                System.out.println("Not Model File");
                JOptionPane.showMessageDialog(null, "Not Model File", "Import Error", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_jMenuItem7MouseReleased

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel MainPanel;
    private javax.swing.JLabel cntLabel;
    private javax.swing.JLabel cntOutLabel;
    private javax.swing.JPanel iLayer;
    private javax.swing.JPanel iPanel;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JPanel oLayer;
    private javax.swing.JPanel oPanel;
    // End of variables declaration//GEN-END:variables
}
