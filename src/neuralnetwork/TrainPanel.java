
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package neuralnetwork;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Administrator
 */
public class TrainPanel extends javax.swing.JPanel {

    /**
     * Creates new form TrainPanel
     */
    
    
    int i, j, k;
    int inputs, outputs, samples;
    
    String[] iodata;
    String[] weights;
    
    float[][] X;
    float[][] T;
    float[][] wmin;
    float[][] wmax;
        
    float learning_rate;
    float EPS = 0;
    
    ArrayList<Float> EPSs = new ArrayList<Float>();
    
    public TrainPanel() {
        initComponents();
        jFileChooser1.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        iLabel = new javax.swing.JLabel();
        oLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jFileChooser1 = new javax.swing.JFileChooser();

        setLayout(null);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Input 1", "Input 2", "Input 3", "Input 4", "Output 1", "Output 2", "Output 3", "Output 4", "Output 5", "Output 6", "Output 7"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jScrollPane1.setViewportView(jTable1);

        add(jScrollPane1);
        jScrollPane1.setBounds(20, 60, 640, 420);

        iLabel.setText("Input Neurons: ");
        add(iLabel);
        iLabel.setBounds(410, 40, 110, 14);

        oLabel.setText("Output Neurons: ");
        add(oLabel);
        oLabel.setBounds(520, 40, 130, 14);

        jButton1.setText("Load From File");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButton1MouseReleased(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        add(jButton1);
        jButton1.setBounds(150, 490, 130, 23);

        jButton2.setText("Train");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButton2MouseReleased(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        add(jButton2);
        jButton2.setBounds(820, 500, 100, 30);

        jButton3.setText("Add New Row");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButton3MouseReleased(evt);
            }
        });
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        add(jButton3);
        jButton3.setBounds(20, 490, 120, 23);

        jLabel1.setText("Max Error:");
        add(jLabel1);
        jLabel1.setBounds(530, 510, 60, 14);
        add(jTextField1);
        jTextField1.setBounds(740, 500, 50, 30);

        jLabel2.setText("Learning Rate:");
        add(jLabel2);
        jLabel2.setBounds(660, 510, 90, 14);
        add(jTextField2);
        jTextField2.setBounds(590, 500, 50, 30);

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("I/O Data");
        add(jLabel3);
        jLabel3.setBounds(20, 40, 80, 17);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Initial Weights");
        add(jLabel4);
        jLabel4.setBounds(670, 40, 120, 17);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"", "", null, null},
                {"", "", null, null},
                {"", "", null, null},
                {"", "", null, null},
                {"", "", null, null},
                {"", "", null, null},
                {"", "", null, null},
                {"", "", null, null},
                {"", "", null, null},
                {"", "", null, null},
                {"", "", null, null},
                {"", "", null, null}
            },
            new String [] {
                "Input", "Output", "MIN", "MAX"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable2.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable2.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable2);

        add(jScrollPane2);
        jScrollPane2.setBounds(670, 60, 250, 420);
        add(jFileChooser1);
        jFileChooser1.setBounds(340, 330, 150, 220);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton3MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseReleased
        // TODO add your handling code here:
        DefaultTableModel model1 = (DefaultTableModel) jTable1.getModel();
        int temp_cnt = inputs + outputs;
        Object[] new_row = new Object[temp_cnt];
        for (i = 0; i < temp_cnt; i++) {
            new_row[i] = "";
        }
        model1.addRow(new_row);
    }//GEN-LAST:event_jButton3MouseReleased

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseReleased
        // TODO add your handling code here:
        jFileChooser1.setVisible(true);
//        System.out.println(System.getProperty("user.dir"));
        jFileChooser1.setCurrentDirectory(new java.io.File(System.getProperty("user.dir")));
        int result = jFileChooser1.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            
//            initialize table1
            initTable();
            
            File selectedFile = jFileChooser1.getSelectedFile();
//            System.out.println("Selected file: " + selectedFile.getAbsolutePath());
            
            boolean check_count = false;
            
            try (BufferedReader br = new BufferedReader(new FileReader(selectedFile))) {
                String line;
                samples = 0;
                int index = 0;
                int index1 = 0;
                
                while ((line = br.readLine()) != null) {
                    if (check_count == false) {
                        String cnt[]= line.split("-");
                        
//                        check validate data dimension
                        if (Integer.parseInt(cnt[0]) == inputs && Integer.parseInt(cnt[1]) == outputs) {
                            samples = Integer.parseInt(cnt[2]);
                            iodata = new String[samples];
                            weights = new String[inputs * outputs];
                            check_count = true;
                        } else {
                            JOptionPane.showMessageDialog(null, "Mismatching Data", "Data Error", JOptionPane.INFORMATION_MESSAGE);
                            return;
                        }
                    } else {
//                        import all data
                        if (index < samples) {
                            iodata[index] = line;
                            index += 1;
                        } else {
                            weights[index1] = line;
                            index1 += 1;
                        }
                    }
//                    System.out.println(line);
                }
            
//            Insert I/O data
                DefaultTableModel model1 = (DefaultTableModel)jTable1.getModel();
                String[] temp = new String[(inputs + outputs)];
                for (i = 0; i < samples; i++) {
                    temp = iodata[i].split(",");
                    model1.addRow(temp);
                }
            
//            Insert Weight data
                DefaultTableModel model2 = (DefaultTableModel)jTable2.getModel();
                String[] temp1 = new String[2];
                for (i = 0; i < inputs * outputs; i++) {
                    temp1 = weights[i].split(",");

                    model2.setValueAt(temp1[0], i, 2);
                    model2.setValueAt(temp1[1], i, 3);
                }
            } catch (FileNotFoundException ex) {
                Logger.getLogger(TrainPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(TrainPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        } 
    }//GEN-LAST:event_jButton1MouseReleased

    private void jButton2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseReleased
        // TODO add your handling code here:
//        System.out.println("----------------------------");
        
        if (jTextField1.getText().length() == 0 || jTextField2.getText().length() == 0) {
            JOptionPane.showMessageDialog(null, "Empty Numbder", "Parameter Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        try {
            learning_rate = Float.parseFloat(jTextField1.getText());
            EPS = Float.parseFloat(jTextField2.getText());
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Invalid Numbder", "Parameter Error", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        int data_cnt = jTable1.getRowCount();
        X = new float[data_cnt][inputs];
        T = new float[data_cnt][outputs];
        wmin = new float[inputs][outputs];
        wmax = new float[inputs][outputs];


        for (i = 0; i < data_cnt; i++) {
            for (j = 0; j < inputs; j++) {
                X[i][j] = Float.parseFloat(jTable1.getModel().getValueAt(i, j).toString());
            }
            for (j = inputs; j < (inputs + outputs); j++) {
                T[i][j - inputs] = Float.parseFloat(jTable1.getModel().getValueAt(i, j).toString());
            }
        }

        for (i = 0; i < (inputs * outputs); i+=outputs) {
            for (j = 0; j < outputs; j++) {
                wmin[i / outputs][j] = Float.parseFloat(jTable2.getModel().getValueAt(i + j, 2).toString());
                wmax[i / outputs][j] = Float.parseFloat(jTable2.getModel().getValueAt(i + j, 3).toString());
            }
        }
        
//        training
        trainENN();
        
//        System.out.println("-----------------------");
    }//GEN-LAST:event_jButton2MouseReleased

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    public void setNeurons(int ines, int ones, boolean is_new) {
        if (is_new == true) {
            this.inputs = ines;
            this.outputs = ones;

            iLabel.setText("Input Neurons: " + String.valueOf(ines));
            oLabel.setText("Output Neurons: " + String.valueOf(ones));

            jTable1.setShowGrid(true);
            jTable2.setShowGrid(true);

            DefaultTableModel dtm1 = (DefaultTableModel) jTable1.getModel();
            DefaultTableModel dtm2 = (DefaultTableModel) jTable2.getModel();
            dtm1.setRowCount(0);
            dtm1.setColumnCount(ines + ones);
            dtm2.setRowCount(ines * ones);

            JTableHeader th1 = jTable1.getTableHeader();
            TableColumnModel tcm1 = th1.getColumnModel();
            for (i = 0; i < ines; i++) {
                tcm1.getColumn(i).setHeaderValue("Input " + String.valueOf(i + 1));
            }
            for (i = ines; i < (ines + ones); i++) {
                tcm1.getColumn(i).setHeaderValue("Output " + String.valueOf(i - ines + 1));
            }

            int a = jTable1.getPreferredSize().width;
            int b = jScrollPane1.getWidth();
            if (a < b) {
                for (i = 0; i < (ines + ones); i++) {
                    tcm1.getColumn(i).setPreferredWidth(b / (ines + ones));
                }
            }
            
            for (i = 0; i < ines * ones; i+=ones) {
                for (j = 0; j < ones; j++) {
//                    System.out.println(i + j);
                    jTable2.getModel().setValueAt("Input " + String.valueOf(i / ones + 1), i + j, 0);
                    jTable2.getModel().setValueAt("Output " + String.valueOf(j + 1), i + j, 1);
                    jTable2.getModel().setValueAt("", i + j, 2);
                    jTable2.getModel().setValueAt("", i + j, 3);
                }
            }
        }
    }
    
    public float[][] getWmin() {
        return wmin;
    }
    
    public float[][] getWmax() {
        return wmax;
    }
    
    private void initTable() {
        DefaultTableModel dm1 = (DefaultTableModel) jTable1.getModel();
        int rowCount = dm1.getRowCount();
        //Remove rows one by one from the end of the table
        for (i = rowCount - 1; i >= 0; i--) {
            dm1.removeRow(i);
        }
    }
    
    private void trainENN() {
     
        samples = jTable1.getRowCount();
        
        int[] P;
        P = new int[samples];
        for(int i = 0; i < samples; i++){
            P[i] = 0;
            float tmp_O = Math.abs(T[i][0]);
            for(int j = 1; j < outputs; j++){
                if(tmp_O > Math.abs(T[i][j])){
                    tmp_O = Math.abs(T[i][j]);
                    P[i] = j;
                }                    
            }
            System.out.println(P[i]);
        }
        
        float[][] ED;
        float[][] O;
        
        ED = new float[samples][outputs];
        O = new float[samples][outputs];
        
        int loop_cnt = 0;

        while(loop_cnt < 1000) {
            loop_cnt ++;
            float[] E;
            E = new float[samples];
            
            for(int i = 0; i < samples; i++) {
                //Step 3: Use the extension distance(ED) to calculate the distance between the input pattern Xi and the k-th cluster
                for(int k = 0; k < outputs; k++){
                    ED[i][k] = 0;
                    for(int j = 0; j < inputs; j++){
                        float w_sum = (wmax[j][k] + wmin[j][k]) / 2;
                        float w_sub = (wmax[j][k] - wmin[j][k]) / 2;
                        float delta = (X[i][j] - w_sum) / w_sub;
                        ED[i][k] = ED[i][k] + delta * delta;
                    }
                }

                //Step 4: Find the m
                int m = 0;
                float min_ED = ED[i][0];

                for(int k = 1; k < outputs; k++) {
                    if(min_ED > ED[i][k]) {
                        min_ED = ED[i][k];
                        m = k;
                    }
                }
                E[i] = min_ED;
                //System.out.println("@@@@@@@@@@@@@@@  " + i + " - " + m + " : " + min_ED);

                //Step 5: Update the weights of the p-th and the m-th clusters
                for(int j = 0; j < inputs; j++) {
                    float tmp = (wmin[j][P[i]] + wmax[j][P[i]]) / 2;
                    tmp = learning_rate * (X[i][j] - tmp);
                    wmin[j][P[i]] = wmin[j][P[i]] + tmp;
                    wmax[j][P[i]] = wmax[j][P[i]] + tmp;

                    tmp = (wmin[j][m] + wmax[j][m]) / 2;
                    tmp = learning_rate * (X[i][j] - tmp);
                    wmin[j][m] = wmin[j][m] - tmp;
                    wmax[j][m] = wmax[j][m] - tmp;
                }              
            }
            
            
            float ERR = 0;
            for(int i = 0; i < samples; i++){
                ERR = ERR + E[i] * E[i];
            }
            
            ERR = ERR / samples;               
            System.out.println(loop_cnt + "--\t" + ERR);
            
            EPSs.add(ERR);
            
//            System.out.println(ERR + "=" + EPS);
            
            if(ERR < EPS) {
//                System.out.println("asdadas");
                JOptionPane.showMessageDialog(null, "Training is finished", "Training Result", JOptionPane.INFORMATION_MESSAGE);
                break;
            }
        }
        
        System.out.println("The number of iterator: " + String.valueOf(EPSs.size()));
    }
    
    public float[] getErrs() {
        int i = 0;
        float[] floatArray = new float[EPSs.size()];

        for (Float f : EPSs) {
            floatArray[i++] = (f != null ? f : Float.NaN); // Or whatever default you want.
        }
        return floatArray;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel iLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JLabel oLabel;
    // End of variables declaration//GEN-END:variables
}
